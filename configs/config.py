from __future__ import annotations
from configparser import ConfigParser


class Config:
    """
    Loads a .conf file and generates a typed globals.py file
    that can be imported elsewhere.
    """

    def __init__(self, conf_file: str) -> None:
        parser = ConfigParser(interpolation=None)
        parser.optionxform = str  # type: ignore[assignment]
        parser.read(conf_file, encoding="utf-8")

        data: dict[str, str | int | float | bool] = {}

        # read the .conf file
        for section in parser.sections():
            for key, value in parser[section].items():
                data[key.upper()] = self._convert_value(value)

        # write it to a .py file
        with open("configs/globals.py", "w", encoding="utf-8") as f:
            f.write('"""Autogenerated config globals."""\n\n')
            for key, value in data.items():
                type_hint = self._get_type_hint(value)
                f.write(f"{key}: {type_hint} = {repr(value)}\n")

    @staticmethod
    def _convert_value(value: str) -> str | int | float | bool:
        """Try to convert the string value to int, float, or bool."""
        if value.isdigit():
            return int(value)
        try:
            return float(value)
        except ValueError:
            pass
        if value.lower() == "true":
            return True
        if value.lower() == "false":
            return False
        return value

    @staticmethod
    def _get_type_hint(value: str | int | float | bool) -> str:
        """Return the type hint string for the given value."""
        if isinstance(value, bool):
            return "bool"
        if isinstance(value, int):
            return "int"
        if isinstance(value, float):
            return "float"
        return "str"
